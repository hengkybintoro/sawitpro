// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/SawitProRecruitment/UserService/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddEstate mocks base method.
func (m *MockRepositoryInterface) AddEstate(width, length int) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEstate", width, length)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEstate indicates an expected call of AddEstate.
func (mr *MockRepositoryInterfaceMockRecorder) AddEstate(width, length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).AddEstate), width, length)
}

// AddTree mocks base method.
func (m *MockRepositoryInterface) AddTree(estateID uuid.UUID, x, y, height int) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTree", estateID, x, y, height)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTree indicates an expected call of AddTree.
func (mr *MockRepositoryInterfaceMockRecorder) AddTree(estateID, x, y, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTree", reflect.TypeOf((*MockRepositoryInterface)(nil).AddTree), estateID, x, y, height)
}

// GetEstate mocks base method.
func (m *MockRepositoryInterface) GetEstate(id uuid.UUID) (*model.Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstate", id)
	ret0, _ := ret[0].(*model.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstate indicates an expected call of GetEstate.
func (mr *MockRepositoryInterfaceMockRecorder) GetEstate(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).GetEstate), id)
}

// GetTreesByEstate mocks base method.
func (m *MockRepositoryInterface) GetTreesByEstate(estateID uuid.UUID) ([]model.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreesByEstate", estateID)
	ret0, _ := ret[0].([]model.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTreesByEstate indicates an expected call of GetTreesByEstate.
func (mr *MockRepositoryInterfaceMockRecorder) GetTreesByEstate(estateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreesByEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).GetTreesByEstate), estateID)
}
